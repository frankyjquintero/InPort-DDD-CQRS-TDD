// <auto-generated />
using System;
using InPort.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InPort.Infra.Data.Migrations
{
    [DbContext(typeof(InPortDbContext))]
    [Migration("20190309194439_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("InPort.Domain.AggregatesModel.CountryAgg.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CountryISOCode");

                    b.Property<string>("CountryName");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("InPort.Domain.AggregatesModel.CustomerAgg.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("CustomerId");

                    b.Property<string>("Company");

                    b.Property<Guid>("CountryId");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("LastName");

                    b.Property<Guid?>("PictureId");

                    b.Property<string>("Telephone");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("PictureId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("InPort.Domain.AggregatesModel.CustomerAgg.Picture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("RawPhoto");

                    b.HasKey("Id");

                    b.ToTable("Picture");
                });

            modelBuilder.Entity("InPort.Domain.AggregatesModel.MeasurentUnitAgg.MeasurentUnit", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<int>("MeasurentUnitTypeId");

                    b.Property<int?>("MeasurentUnitTypeId1");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("MeasurentUnitTypeId");

                    b.HasIndex("MeasurentUnitTypeId1");

                    b.ToTable("MeasurentUnits");
                });

            modelBuilder.Entity("InPort.Domain.AggregatesModel.MeasurentUnitAgg.MeasurentUnitType", b =>
                {
                    b.Property<int>("Id")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("MeasurentUnitType");
                });

            modelBuilder.Entity("InPort.Domain.AggregatesModel.OrderIncomeAgg.OrderIncome", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("CustomerId");

                    b.Property<Guid?>("CustomerId1");

                    b.Property<string>("MainSupportDocument");

                    b.Property<string>("Observation");

                    b.Property<DateTime>("OrderDate");

                    b.Property<int>("OrderIncomeStatusId");

                    b.Property<int?>("OrderIncomeStatusId1");

                    b.Property<string>("SecondarySupportDocument");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerId1");

                    b.HasIndex("OrderIncomeStatusId");

                    b.HasIndex("OrderIncomeStatusId1");

                    b.ToTable("OrderIncomes");
                });

            modelBuilder.Entity("InPort.Domain.AggregatesModel.OrderIncomeAgg.OrderIncomeLine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("OrderIncomeLineId");

                    b.Property<int>("Amount");

                    b.Property<Guid>("MeasurentUnitId");

                    b.Property<string>("MeasurentUnitName")
                        .IsRequired();

                    b.Property<Guid>("OrderIncomeId");

                    b.Property<Guid>("ProductId");

                    b.Property<string>("ProductName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("MeasurentUnitId");

                    b.HasIndex("OrderIncomeId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderIncomeLines");
                });

            modelBuilder.Entity("InPort.Domain.AggregatesModel.OrderIncomeAgg.OrderIncomeStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("OrderStatus");
                });

            modelBuilder.Entity("InPort.Domain.AggregatesModel.ProductAgg.Product", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("InPort.Domain.AggregatesModel.ProductAgg.ProductMeasurentUnit", b =>
                {
                    b.Property<Guid>("ProductId");

                    b.Property<Guid>("MeasurentUnitId");

                    b.HasKey("ProductId", "MeasurentUnitId");

                    b.HasIndex("MeasurentUnitId");

                    b.ToTable("ProductMeasurentUnit");
                });

            modelBuilder.Entity("InPort.Domain.Core.Events.StoredEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AggregateId");

                    b.Property<string>("Data");

                    b.Property<string>("EventType")
                        .HasColumnName("Action")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnName("CreationDate");

                    b.Property<string>("User");

                    b.HasKey("Id");

                    b.ToTable("StoredEvent");
                });

            modelBuilder.Entity("InPort.Domain.AggregatesModel.CustomerAgg.Customer", b =>
                {
                    b.HasOne("InPort.Domain.AggregatesModel.CountryAgg.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InPort.Domain.AggregatesModel.CustomerAgg.Picture", "Picture")
                        .WithMany()
                        .HasForeignKey("PictureId");

                    b.OwnsOne("InPort.Domain.AggregatesModel.CustomerAgg.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("CustomerId");

                            b1.Property<string>("AddressLine1");

                            b1.Property<string>("AddressLine2");

                            b1.Property<string>("City");

                            b1.Property<string>("ZipCode");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.HasOne("InPort.Domain.AggregatesModel.CustomerAgg.Customer")
                                .WithOne("Address")
                                .HasForeignKey("InPort.Domain.AggregatesModel.CustomerAgg.Address", "CustomerId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("InPort.Domain.AggregatesModel.MeasurentUnitAgg.MeasurentUnit", b =>
                {
                    b.HasOne("InPort.Domain.AggregatesModel.MeasurentUnitAgg.MeasurentUnitType")
                        .WithMany()
                        .HasForeignKey("MeasurentUnitTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InPort.Domain.AggregatesModel.MeasurentUnitAgg.MeasurentUnitType", "MeasurentUnitType")
                        .WithMany()
                        .HasForeignKey("MeasurentUnitTypeId1");
                });

            modelBuilder.Entity("InPort.Domain.AggregatesModel.OrderIncomeAgg.OrderIncome", b =>
                {
                    b.HasOne("InPort.Domain.AggregatesModel.CustomerAgg.Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InPort.Domain.AggregatesModel.CustomerAgg.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId1");

                    b.HasOne("InPort.Domain.AggregatesModel.OrderIncomeAgg.OrderIncomeStatus")
                        .WithMany()
                        .HasForeignKey("OrderIncomeStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InPort.Domain.AggregatesModel.OrderIncomeAgg.OrderIncomeStatus", "OrderIncomeStatus")
                        .WithMany()
                        .HasForeignKey("OrderIncomeStatusId1");
                });

            modelBuilder.Entity("InPort.Domain.AggregatesModel.OrderIncomeAgg.OrderIncomeLine", b =>
                {
                    b.HasOne("InPort.Domain.AggregatesModel.MeasurentUnitAgg.MeasurentUnit", "MeasurentUnit")
                        .WithMany()
                        .HasForeignKey("MeasurentUnitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InPort.Domain.AggregatesModel.OrderIncomeAgg.OrderIncome", "OrderIncome")
                        .WithMany("OrderIncomeLines")
                        .HasForeignKey("OrderIncomeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InPort.Domain.AggregatesModel.ProductAgg.Product", "Product")
                        .WithMany("OrderIncomeLines")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InPort.Domain.AggregatesModel.ProductAgg.ProductMeasurentUnit", b =>
                {
                    b.HasOne("InPort.Domain.AggregatesModel.MeasurentUnitAgg.MeasurentUnit", "MeasurentUnit")
                        .WithMany("ProductMeasurentUnits")
                        .HasForeignKey("MeasurentUnitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InPort.Domain.AggregatesModel.ProductAgg.Product", "Product")
                        .WithMany("ProductMeasurentUnits")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
