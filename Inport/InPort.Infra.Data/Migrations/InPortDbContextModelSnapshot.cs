// <auto-generated />
using System;
using InPort.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InPort.Infra.Data.Migrations
{
    [DbContext(typeof(InPortDbContext))]
    partial class InPortDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("InPort.Domain.AggregatesModel.CountryAgg.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CountryISOCode");

                    b.Property<string>("CountryName");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("InPort.Domain.AggregatesModel.CustomerAgg.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("ID")
                        .HasMaxLength(5);

                    b.Property<string>("Company");

                    b.Property<Guid>("CountryId");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("LastName");

                    b.Property<Guid?>("PictureId");

                    b.Property<string>("Telephone");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("PictureId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("InPort.Domain.AggregatesModel.CustomerAgg.Picture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("RawPhoto");

                    b.HasKey("Id");

                    b.ToTable("Picture");
                });

            modelBuilder.Entity("InPort.Domain.Core.Events.StoredEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AggregateId");

                    b.Property<string>("Data");

                    b.Property<string>("MessageType")
                        .HasColumnName("Action")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnName("CreationDate");

                    b.Property<string>("User");

                    b.HasKey("Id");

                    b.ToTable("StoredEvent");
                });

            modelBuilder.Entity("InPort.Domain.AggregatesModel.CustomerAgg.Customer", b =>
                {
                    b.HasOne("InPort.Domain.AggregatesModel.CountryAgg.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InPort.Domain.AggregatesModel.CustomerAgg.Picture", "Picture")
                        .WithMany()
                        .HasForeignKey("PictureId");

                    b.OwnsOne("InPort.Domain.AggregatesModel.CustomerAgg.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("CustomerId");

                            b1.Property<string>("AddressLine1");

                            b1.Property<string>("AddressLine2");

                            b1.Property<string>("City");

                            b1.Property<string>("ZipCode");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.HasOne("InPort.Domain.AggregatesModel.CustomerAgg.Customer")
                                .WithOne("Address")
                                .HasForeignKey("InPort.Domain.AggregatesModel.CustomerAgg.Address", "CustomerId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
